#include <ros.h>
#include <geometry_msgs/Twist.h>

#define MOTOR_A_PWM 9  // Motor A Speed
#define MOTOR_A_IN1 8  // Motor A Direction
#define MOTOR_A_IN2 7  // Motor A Direction

#define MOTOR_B_PWM 10 // Motor B Speed
#define MOTOR_B_IN1 6  // Motor B Direction
#define MOTOR_B_IN2 5  // Motor B Direction

ros::NodeHandle nh;

void driveMotors(int leftSpeed, int rightSpeed) {
    // Left motor control
    if (leftSpeed > 0) {
        digitalWrite(MOTOR_A_IN1, HIGH);
        digitalWrite(MOTOR_A_IN2, LOW);
    } else {
        digitalWrite(MOTOR_A_IN1, LOW);
        digitalWrite(MOTOR_A_IN2, HIGH);
    }
    analogWrite(MOTOR_A_PWM, abs(leftSpeed));

    // Right motor control
    if (rightSpeed > 0) {
        digitalWrite(MOTOR_B_IN1, HIGH);
        digitalWrite(MOTOR_B_IN2, LOW);
    } else {
        digitalWrite(MOTOR_B_IN1, LOW);
        digitalWrite(MOTOR_B_IN2, HIGH);
    }
    analogWrite(MOTOR_B_PWM, abs(rightSpeed));
}

void cmdVelCallback(const geometry_msgs::Twist& msg) {
    float linear = msg.linear.x;  // Forward/Backward speed
    float angular = msg.angular.z; // Rotation speed

    int leftSpeed = (linear * 255) - (angular * 100);
    int rightSpeed = (linear * 255) + (angular * 100);

    leftSpeed = constrain(leftSpeed, -255, 255);
    rightSpeed = constrain(rightSpeed, -255, 255);

    driveMotors(leftSpeed, rightSpeed);
}

ros::Subscriber<geometry_msgs::Twist> sub("/cmd_vel", cmdVelCallback);

void setup() {
    pinMode(MOTOR_A_PWM, OUTPUT);
    pinMode(MOTOR_A_IN1, OUTPUT);
    pinMode(MOTOR_A_IN2, OUTPUT);
    pinMode(MOTOR_B_PWM, OUTPUT);
    pinMode(MOTOR_B_IN1, OUTPUT);
    pinMode(MOTOR_B_IN2, OUTPUT);

    nh.initNode();
    nh.subscribe(sub);
}

void loop() {
    nh.spinOnce();
    delay(10);
}
